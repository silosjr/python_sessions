"""
M√≥dulo Did√°tico sobre a Defini√ß√£o, Composi√ß√£o e Fluxo de Fun√ß√µes.

Este script serve como um estudo de caso pr√°tico sobre os conceitos
fundamentais que governam a cria√ß√£o e a utiliza√ß√£o de fun√ß√µes em Python.
O seu objetivo √© transformar os blocos de constru√ß√£o te√≥ricos da programa√ß√£o
estruturada em ferramentas pr√°ticas e autoexplicativas.

O m√≥dulo explora progressivamente:
1.  A utiliza√ß√£o de fun√ß√µes nativas para convers√£o de tipos e o tratamento
    robusto de erros de convers√£o.
2.  A importa√ß√£o e utiliza√ß√£o de fun√ß√µes de m√≥dulos externos, como o `math`.
3.  A defini√ß√£o de novas fun√ß√µes (`def`), distinguindo entre fun√ß√µes "nulas"
    (que realizam uma a√ß√£o) e "fun√ß√µes com resultado" (que retornam um valor).
4.  O conceito de composi√ß√£o, sob o qual as fun√ß√µes s√£o usadas como blocos de 
    constru√ß√£o para criar comportamentos mais complexos.
5.  O escopo de vari√°veis e o fluxo de execu√ß√£o durante chamadas de fun√ß√£o.
"""

from __future__ import annotations
from typing import Any, Optional
import math 
import random 

__author__ = 'Enock Silos'
__version__ = '1.0.0' 
__email__ = 'init.caucasian722@passfwd.com'
__status__ = 'Development'

def analyze_value(value: Any) -> None:
    """
    Analisa um valor e testa a sua conversibilidade para tipos fundamentais.

    Esta fun√ß√£o atua como um "laborat√≥rio seguro", demonstrando como as 
    fun√ß√µes de convers√£o de tipo (`int()`, `float()`, `str()` e `complex()`)
    se comportam com diferentes entradas. Cada tentativa de convers√£o √©
    encapsulada em um bloco `try/except/else` para relatar o sucesso ou a 
    falha de forma controlada, sem interromper o programa.

    Args:
        value (Any): O valor de qualquer tipo a ser analizado.
    """
    print(f'\n\t--- An√°lise do Valor: {value} (Tipo: {type(value).__name__}) --- \n')
    
    try:
        converted_int = int(value)
    except (Exception, ValueError) as e:
        print(f'üö´ N√£o foi poss√≠vel converter {value} do tipo {type(value)} para `int``\n‚ùó Motivo: {e}\n')
    else:
        print(f'‚úÖ Foi poss√≠vel converter {value} para o `int` {converted_int}\n')

    try:
        converted_float = float(value)
    except (Exception, ValueError) as e:
        print(f'üö´ N√£o foi poss√≠vel converter {value} do tipo {type(value)} para um `float`\n‚ùó Motivo: {e}\n')
    else:
        print(f'‚úÖ Foi poss√≠vel converter {value} do tipo {type(value)} no `float` {converted_float}\n')

    try:
        converted_str = str(value)
    except (Exception, ValueError) as e:
            print(f'üö´ N√£o foi poss√≠vel converter {value} do tipo {type(value)} para o tipo `str`\n‚ùó Motivo: {e}\n')
    else:
        print(f"‚úÖ Foi poss√≠vel converter {value} do tipo {type(value)} na `string` '{converted_str}'\n")
        
    try:
        converted_complex = complex(value)
    except (Exception, ValueError) as e:
        print(f'üö´ N√£o foi poss√≠vel realizar a convers√£o de um tipo: {type(value)} para outro tipo.\n‚ùó Motivo: {e}\n')
    else:
        print(f'‚úÖ Foi poss√≠vel converter {value} do tipo {type(value)} no `complex` {converted_complex}\n')
    
    print('-' * 75)

def calculate_signal_to_noise_ratio(signal_power: float, noise_power: float) -> Optional[float]:
    """
    Calcula a Rela√ß√£o Sinal-Ru√≠do (SNR) em decib√©is (dB).

    Esta fun√ß√£o demonstra a utiliza√ß√£o de ferramentas de um m√≥dulo externo (`math`)
    para realizar c√°lculos cient√≠ficos. Inclui uma cl√°usula de guarda para
    evitar erros matem√°ticos (divis√£o por zero ou log de n√∫mero n√£o positivo).

    Args:
        signal_power (float): A pot√™ncia do sinal.
        noise_power (float): A pot√™ncia do ru√≠do

    Returns:
        Optional[float]: O valor da SNR em decib√©is, ou None se a entrada for inv√°lida.
    """
    if signal_power <= 0 or noise_power <= 0:
        return None
    
    ratio = signal_power / noise_power
    decibels = 10 * math.log10(ratio) 
    return decibels

def display_twice(message: str) -> None:
    """
    Fun√ß√£o "nula" que realiza uma a√ß√£o: imprimir uma mensagem duas vezes.

    Args:
        message (str): A mensagem a ser impressa no console.
    """
    print(message)
    print(message)

def compose_message(part1: str, part2: str) -> str:
    """
    Fun√ß√£o "com resultado" que concatena duas strings e retorna a nova string.

    Esta fun√ß√£o demonstra o conceito de vari√°vel local (`composed_message`) e 
    a separa√ß√£o entre a l√≥gica de c√°lculo e a apresenta√ß√£o do resultado.

    Args:
        part1 (str): A primeira parte da mensagem que ser√° concatenada.
        part2 (str): A segunda parte da mensagem que ser√° concatenada.

    Returns:
        str: A uni√£o das duas strings resultando em uma √∫nica string.
    """
    composed_message = part1 + part2
    return composed_message

if __name__ == '__main__':

    print('--- Fase 1: Explorando Fun√ß√µes de Convers√£o de Tipo ---\n')
    analyze_value('123')
    analyze_value(98.6)
    analyze_value(0)
    analyze_value('Ol√°, Mundo')
    analyze_value([1, 2, 3])

    print('\n--- Fase 2: Definindo e Compondo Novas Fun√ß√µes ---\n')
    
    # 1. Demonstra√ß√£o do uso de um m√≥dulo externo
    print('1. C√°lculo da Rela√ß√£o Sinal-Ru√≠do (SNR):')
    snr = calculate_signal_to_noise_ratio(signal_power=100, noise_power=10)
    if snr is not None:
        print(f'   Resultado: {snr:.2f} dB\n')

    # 2. Demonstra√ß√£o da composi√ß√£o de fun√ß√µes
    print('2. Demonstra√ß√£o de Composi√ß√£o e Fluxo de Execu√ß√£o:\n')
    
    # Criamos duas partes de uma mensagem
    prefixo = 'Expl√≠cito √© melhor do que '
    sufixo = 'impl√≠cito.'
    
    # Usamos a nossa fun√ß√£o "com resultado" para compor a mensagem final
    mensagem_completa = compose_message(prefixo, sufixo)
    
    # Usamos a nossa fun√ß√£o "nula" para exibir o resultado
    print('   A fun√ß√£o `compose_message` criou a mensagem:')
    print(f"   '{mensagem_completa}'")
    print('\n   A fun√ß√£o `display_twice` agora a exibir√° duas vezes:\n')
    display_twice(mensagem_completa)
    print()