# python_sessions/concepts/foundations/expressions_and_statements.py

"""
M√≥dulo Did√°tico sobre Express√µes, Instru√ß√µes e Operadores Fundamentais.

Este script serve como laborat√≥rio pr√°tico para a explora√ß√£o de conceitos
fundamentais da sintaxe e da l√≥gica de c√°lculo em Python. O seu des√≠gnio √©
demonstrar, de forma controlada e autoexplicativa, tanto a rea√ß√£o do
interpretador a instru√ß√µes sintaticamente an√¥malas quanto a aplica√ß√£o de
operadores aritm√©ticos para a resolu√ß√£o de problemas pr√°ticos.
"""
from __future__ import annotations
from syntax_and_operators import test_code_snippet
from unit_conversion_calculator import convert_to_seconds
import math
import locale

__author__ = 'Enock Silos'
__email__ = 'init.caucasian722@passfwd.com'
__status__ = 'Development'


def demonstrate_operator_precedence() -> None:
    """
    Ilustra a ordem de avalia√ß√£o de operadores em uma express√£o complexa.

    Em ci√™ncia da computa√ß√£o, 'preced√™ncia de operadores' define a ordem em
    que as opera√ß√µes s√£o realizadas. O interpretador segue estas regras para
    resolver uma express√£o a um valor final √∫nico. Esta fun√ß√£o detalha o
    processo passo a passo, mostrando como a exponencia√ß√£o (**) precede a
    multiplica√ß√£o (*), que por sua vez precede a adi√ß√£o (+), e como
    operadores de mesma preced√™ncia s√£o avaliados da esquerda para a direita.
    """
    expression: float = 10 % 3 * 10 ** 2 + 1 - 1 * 4 / 2
    print(f'''
        --- 1. Demonstra√ß√£o: Preced√™ncia de Operadores ---

        Express√£o Original: 10 % 3 * 10 ** 2 + 1 - 1 * 4 / 2

        Ordem de Avalia√ß√£o pelo Interpretador:
        1. Exponencia√ß√£o (maior preced√™ncia):
           10 % 3 * 100 + 1 - 1 * 4 / 2

        2. Multiplica√ß√£o, Divis√£o e M√≥dulo (da esquerda para a direita):
           (10 % 3) * 100 + 1 - 1 * 4 / 2  -> (1) * 100 + 1 - 1 * 4 / 2
           (1 * 100) + 1 - 1 * 4 / 2      -> 100 + 1 - 1 * 4 / 2
           100 + 1 - (1 * 4) / 2          -> 100 + 1 - (4) / 2
           100 + 1 - (4 / 2)              -> 100 + 1 - 2.0

        3. Adi√ß√£o e Subtra√ß√£o (da esquerda para a direita):
           (100 + 1) - 2.0                -> 101 - 2.0
           (101 - 2.0)                    -> {expression}
    ''')


def demonstrate_assignment_and_types() -> None:
    """
    Demonstra a atribui√ß√£o de valores a vari√°veis e a tipagem din√¢mica.

    Um 'statement de atribui√ß√£o' (=) associa um nome (identificador) a um
    valor na mem√≥ria. Python √© uma linguagem de tipagem din√¢mica, o que
    significa que o tipo da vari√°vel √© inferido a partir do valor que lhe √©
    atribu√≠do. Esta fun√ß√£o exibe diferentes valores e seus tipos
    correspondentes (`str`, `int`, `float`), que s√£o inferidos
    automaticamente pelo interpretador.
    """
    name: str = 'Enock Silos'
    age: int = 40
    weight: float = 74.0
    height: float = 1.72
    print(f'''
        --- 2. Demonstra√ß√£o: Atribui√ß√£o e Tipos Fundamentais ---

        Nome:      {name:<10} -> {type(name)}
        Idade:     {age:<10}  -> {type(age)}
        Peso:      {weight:<10}  -> {type(weight)}
        Altura:    {height:<10}  -> {type(height)}
    ''')


def demonstrate_boolean_logic() -> None:
    """
    Explora como express√µes l√≥gicas e de compara√ß√£o s√£o avaliadas para um
    resultado booleano (True ou False).

    Operadores de compara√ß√£o (>=) e l√≥gicos (and) s√£o usados para formular
    condi√ß√µes complexas. O resultado dessas express√µes √© a base do controle
    de fluxo. A fun√ß√£o simula um boletim acad√™mico para demonstrar como uma
    condi√ß√£o de aprova√ß√£o composta √© calculada e avaliada.
    """
    PASSING_GRADE: int = 7
    data_structures: float = 6.9
    algorithms: float = 8.5
    operating_systems: float = 9.0
    passed: bool = (algorithms >= PASSING_GRADE and
                    data_structures >= PASSING_GRADE and
                    operating_systems >= PASSING_GRADE)
    print(f'''
        --- 3. Demonstra√ß√£o: L√≥gica Booleana ---

                      üîπ  BOLETIM FINAL  üîπ
        ------------------------------------------------
        ‚ÑπÔ∏è  True = Aprovado
        ‚ÑπÔ∏è  False = Reprovado
        ------------------------------------------------
            DISCIPLINAS              NOTAS
        ------------------------------------------------
        Estrutura de Dados       {data_structures} ‚ö†Ô∏è
        Algoritmos               {algorithms} ‚úÖ
        Sistemas Operacionais    {operating_systems} ‚úÖ
        ------------------------------------------------
        SITUA√á√ÉO FINAL = {passed} ‚ùå
''')


def calculate_sphere_volume(radius: float) -> float:
    """
    Calcula o volume de uma esfera com base no seu raio.

    Esta fun√ß√£o implementa a f√≥rmula matem√°tica V = (4/3) * œÄ * r¬≥. A utiliza√ß√£o
    do m√≥dulo `math` para a constante `pi` garante a precis√£o do c√°lculo.
    """
    return (4 / 3) * math.pi * (radius ** 3)


def apply_discount(full_price: float, discount_percentage: float) -> float:
    """
    Calcula o valor final de um item ap√≥s a aplica√ß√£o de um desconto percentual.

    A l√≥gica subtrai a fra√ß√£o do desconto do valor unit√°rio (100%) para
    encontrar o fator multiplicativo do pre√ßo final.
    """
    return full_price * (1 - discount_percentage / 100)


def calculate_shipping(num_itens: int) -> float:
    """
    Calcula o custo total do frete com base numa l√≥gica de pre√ßos escalonada.

    A fun√ß√£o modela um cen√°rio comercial comum onde o custo de envio para o
    primeiro item √© fixo, e um custo adicional menor √© aplicado para cada
    item subsequente.
    """
    FIRST_ITEM_COST: float = 3.00
    ADDITIONAL_ITEM_COST: float = 0.75

    if num_itens <= 0:
        return 0.0

    return FIRST_ITEM_COST + (num_itens - 1) * ADDITIONAL_ITEM_COST


def main() -> None:
    """
    Ponto de entrada principal que orquestra as diferentes fases de
    demonstra√ß√£o do script.
    """
    print('\n--- Fase 0: Demonstra√ß√µes de Conceitos Fundamentais ---')
    demonstrate_operator_precedence()
    demonstrate_assignment_and_types()
    demonstrate_boolean_logic()

    print('\n\n--- Fase 1: Laborat√≥rio de Sintaxe (An√°lise de Erros) ---')
    test_code_snippet(
        'Atribui√ß√£o com literal √† esquerda (ex: 42 = n)',
        'n = 42; 42 = n'
    )
    test_code_snippet(
        'Atribui√ß√£o Encadeada (ex: x = y = 1)',
        "x = y = 1; print(f'x={x}, y={y}')"
    )
    test_code_snippet(
        'Ponto e V√≠rgula ao fim da linha (ex: x = 1;)',
        'x = 1;'
    )
    test_code_snippet(
        'Uso de ponto para denotar um tipo `float` (ex: x = 1.)',
        "x = 1.; print(f'O tipo de x √© {type(x).__name__}')"
    )
    test_code_snippet(
        'Tentativa de Multiplica√ß√£o Impl√≠cita (ex: xy)',
        'x = 1; y = 3 ; print(xy)'
    )

    print('\n\n--- Fase 2: Aplica√ß√£o de Express√µes (Estudos de Caso) ---')
    # C√°lculo do volume de uma esfera com raio 5
    sphere_volume = calculate_sphere_volume(5)
    print(f'\n1. O volume de uma esfera com raio 5 √© {sphere_volume:.2f}cm¬≥')

    # Simula√ß√£o de Custo Comercial
    print('\n2. Simula√ß√£o de Custo Comercial')
    locale.setlocale(locale.LC_MONETARY, 'pt_BR.UTF-8')
    RETAIL_PRICE: float = 24.95
    WHOLESALE_DISCOUNT_PERCENTAGE: int = 40
    quantity: int = 60

    final_shipping_value = calculate_shipping(quantity)
    discounted_price = apply_discount(RETAIL_PRICE, WHOLESALE_DISCOUNT_PERCENTAGE)
    total_cost = discounted_price * quantity + final_shipping_value

    print(f'   VALOR VAREJO: {locale.currency(RETAIL_PRICE, grouping=True):>40}')
    print(f'   VALOR ATACADO: {locale.currency(discounted_price, grouping=True):>39}')
    print(f'   VALOR DO FRETE (1 exemplar): {locale.currency(calculate_shipping(1), grouping=True):>24}')
    print(f'   QUANTIDADE SOLICITADA: {quantity:>25} unidades')
    print(f'   TOTAL A SER PAGO: {locale.currency(total_cost, grouping=True):>37}')

    # C√°lculo de Log√≠stica e Tempo
    print('\n3. C√°lculo de Log√≠stica e Tempo')
    start_time_seconds = convert_to_seconds(minutes=(6 * 60 + 52), seconds=0)
    slow_pace_duration = convert_to_seconds(8, 15) * 2
    fast_pace_duration = convert_to_seconds(7, 12) * 3
    race_duration_seconds = slow_pace_duration + fast_pace_duration
    arrival_time_seconds = start_time_seconds + race_duration_seconds

    hours, remaining_seconds = divmod(arrival_time_seconds, 3600)
    minutes, seconds = divmod(remaining_seconds, 60)

    print(f'   A hora de chegada calculada √© {int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}\n')


if __name__ == '__main__':
    main()
